---
name: "PR Terraform Plan"

on:
  pull_request:
      branches: 'main'

jobs:
  dev:
      permissions:
        id-token: write
        contents: read
        pull-requests: write
      runs-on: ubuntu-latest
      env:
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      steps:                  
          - name: 'Checkout'
            uses: actions/checkout@v4

          - name: 'Setup Terraform'
            uses: hashicorp/setup-terraform@v3
            with:
              cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
              terraform_version: '1.7.3'
          
          - name: Terraform Format
            id: fmt
            run: terraform -chdir=dev fmt  -check -recursive

          - name: Terraform Init
            id: init
            run: terraform -chdir=dev init

          - name: Terraform Validate
            id: validate
            run: terraform validate -no-color

          - name: Terraform Plan
            id: plan
            run: terraform -chdir=dev plan
          
          - name: Adding markdown
            env:
              GITHUB_STEP_SUMMARY: ${{ steps.plan.outputs.stdout }}
            run: echo '### Hello world! üöÄ'
          
          - uses: actions/github-script@v6
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
            with:
              script: |
                // 1. Retrieve existing bot comments for the PR
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number
                })
                const botComment = comments.find(comment => {
                  return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                })
          
                // 2. Prepare format of the comment
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                <details><summary>Validation Output</summary>

                \`\`\`\n
                ${{ steps.validate.outputs.stdout }}
                \`\`\`
          
                </details>
          
                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
                <details><summary>Show Plan</summary>
          
                \`\`\`\n
                ${process.env.PLAN}
                \`\`\`
          
                </details>
          
                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
                // 3. If we have a comment, update it, otherwise create a new one
                if (botComment) {
                  github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                  })
                } else {
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
                }
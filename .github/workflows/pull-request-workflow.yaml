---
name: "PR Terraform Plan"

on:
  pull_request:
      branches: 'main'

jobs:
  dev:
      permissions:
        id-token: write
        contents: write
      runs-on: ubuntu-latest
      env:
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      steps:                  
          - name: 'Checkout'
            uses: actions/checkout@v4

          - name: 'Setup Terraform'
            uses: hashicorp/setup-terraform@v3
            with:
              cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
              terraform_version: '1.7.3'
          
          - name: Terraform Format
            id: fmt
            run: terraform -chdir=dev fmt  -check -recursive

          - name: Terraform Init
            id: init
            run: terraform -chdir=dev init

          - name: Terraform Plan
            id: plan
            run: terraform -chdir=dev plan -out workspace.plan
          
          - uses: actions/github-script@v6
            if: github.event_name == 'pull_request'
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                // 1. Retrieve existing bot comments for the PR
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                })
                const botComment = comments.find(comment => {
                  return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
                })
                const output = `#### Terraform Cloud Plan Output
                    \`\`\`\n
                    Plan: ${{ steps.plan.outputs.add }} to add, ${{ steps.plan.outputs.change }} to change, ${{ steps.plan.outputs.destroy }} to destroy.
                    \`\`\`
                    [Terraform Cloud Plan]
                    `
                // 3. If we have a comment, update it, otherwise create a new one
                if (botComment) {
                  github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                  })
                } else {
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
                }